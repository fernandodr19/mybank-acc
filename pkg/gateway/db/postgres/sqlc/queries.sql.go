// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (document, balance, available_credit)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateAccountParams struct {
	Document        string `json:"document"`
	Balance         int64  `json:"balance"`
	AvailableCredit int64  `json:"available_credit"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (string, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Document, arg.Balance, arg.AvailableCredit)
	var id string
	err := row.Scan(&id)
	return id, err
}

const decreaseAvailableCredit = `-- name: DecreaseAvailableCredit :exec
UPDATE accounts
SET available_credit = available_credit - $1
WHERE id = $2
`

type DecreaseAvailableCreditParams struct {
	Amount int64  `json:"amount"`
	ID     string `json:"id"`
}

func (q *Queries) DecreaseAvailableCredit(ctx context.Context, arg DecreaseAvailableCreditParams) error {
	_, err := q.db.Exec(ctx, decreaseAvailableCredit, arg.Amount, arg.ID)
	return err
}

const deposit = `-- name: Deposit :exec
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
`

type DepositParams struct {
	Amount int64  `json:"amount"`
	ID     string `json:"id"`
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) error {
	_, err := q.db.Exec(ctx, deposit, arg.Amount, arg.ID)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, document, balance, available_credit, created_at, updated_at FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Document,
		&i.Balance,
		&i.AvailableCredit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const withdraw = `-- name: Withdraw :exec
UPDATE accounts
SET balance = balance - $1
WHERE id = $2
`

type WithdrawParams struct {
	Amount int64  `json:"amount"`
	ID     string `json:"id"`
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) error {
	_, err := q.db.Exec(ctx, withdraw, arg.Amount, arg.ID)
	return err
}
