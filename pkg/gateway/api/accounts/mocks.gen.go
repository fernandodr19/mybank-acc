// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package accounts

import (
	"context"
	"github.com/fernandodr19/mybank-acc/pkg/domain/entities"
	"github.com/fernandodr19/mybank-acc/pkg/domain/vos"
	"sync"
)

// AccountsMockUsecase is a mock implementation of Usecase.
//
// 	func TestSomethingThatUsesUsecase(t *testing.T) {
//
// 		// make and configure a mocked Usecase
// 		mockedUsecase := &AccountsMockUsecase{
// 			CreateAccountFunc: func(ctx context.Context, doc vos.Document) (vos.AccountID, error) {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetAccountByIDFunc: func(ctx context.Context, accID vos.AccountID) (entities.Account, error) {
// 				panic("mock out the GetAccountByID method")
// 			},
// 		}
//
// 		// use mockedUsecase in code that requires Usecase
// 		// and then make assertions.
//
// 	}
type AccountsMockUsecase struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(ctx context.Context, doc vos.Document) (vos.AccountID, error)

	// GetAccountByIDFunc mocks the GetAccountByID method.
	GetAccountByIDFunc func(ctx context.Context, accID vos.AccountID) (entities.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Doc is the doc argument value.
			Doc vos.Document
		}
		// GetAccountByID holds details about calls to the GetAccountByID method.
		GetAccountByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccID is the accID argument value.
			AccID vos.AccountID
		}
	}
	lockCreateAccount  sync.RWMutex
	lockGetAccountByID sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *AccountsMockUsecase) CreateAccount(ctx context.Context, doc vos.Document) (vos.AccountID, error) {
	callInfo := struct {
		Ctx context.Context
		Doc vos.Document
	}{
		Ctx: ctx,
		Doc: doc,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	if mock.CreateAccountFunc == nil {
		var (
			accountIDOut vos.AccountID
			errOut       error
		)
		return accountIDOut, errOut
	}
	return mock.CreateAccountFunc(ctx, doc)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedUsecase.CreateAccountCalls())
func (mock *AccountsMockUsecase) CreateAccountCalls() []struct {
	Ctx context.Context
	Doc vos.Document
} {
	var calls []struct {
		Ctx context.Context
		Doc vos.Document
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetAccountByID calls GetAccountByIDFunc.
func (mock *AccountsMockUsecase) GetAccountByID(ctx context.Context, accID vos.AccountID) (entities.Account, error) {
	callInfo := struct {
		Ctx   context.Context
		AccID vos.AccountID
	}{
		Ctx:   ctx,
		AccID: accID,
	}
	mock.lockGetAccountByID.Lock()
	mock.calls.GetAccountByID = append(mock.calls.GetAccountByID, callInfo)
	mock.lockGetAccountByID.Unlock()
	if mock.GetAccountByIDFunc == nil {
		var (
			accountOut entities.Account
			errOut     error
		)
		return accountOut, errOut
	}
	return mock.GetAccountByIDFunc(ctx, accID)
}

// GetAccountByIDCalls gets all the calls that were made to GetAccountByID.
// Check the length with:
//     len(mockedUsecase.GetAccountByIDCalls())
func (mock *AccountsMockUsecase) GetAccountByIDCalls() []struct {
	Ctx   context.Context
	AccID vos.AccountID
} {
	var calls []struct {
		Ctx   context.Context
		AccID vos.AccountID
	}
	mock.lockGetAccountByID.RLock()
	calls = mock.calls.GetAccountByID
	mock.lockGetAccountByID.RUnlock()
	return calls
}
